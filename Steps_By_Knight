//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
private:
    bool isValid(int row, int col, int n) {
        return row>0 && row<=n && col>0 && col<=n;
    }
    int solve(vector<int> &targetPos, vector<int> &startPos, int n) {
        vector<vector<bool>> vis(n+1, vector<bool>(n+1, false));
        queue<pair<int, pair<int,int>>> q;
        
        q.push({0, {startPos[0], startPos[1]}});
        vis[startPos[0]][startPos[1]] = true;
        
        vector<int> dr = {-2, -2, 1, -1, 2, 2, 1, -1};
        vector<int> dc = {-1, 1, 2, 2, 1, -1, -2, -2};
        
        while(!q.empty()) {
            int step = q.front().first;
            int row = q.front().second.first;
            int col = q.front().second.second;
            q.pop();
            
            if(row == targetPos[0] && col == targetPos[1])
                return step;
            
            for(int i=0; i<8; i++) {
                int nrow = row + dr[i];
                int ncol = col + dc[i];
                
                if(isValid(nrow, ncol, n) && !vis[nrow][ncol]) {
                    vis[nrow][ncol] = true;
                    q.push({step+1, {nrow, ncol}});
                }
            }
        }
        
        return -1;
        
    }
public:
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N){
	    return solve(KnightPos, TargetPos, N);
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
