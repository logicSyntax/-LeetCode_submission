//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
    private:
    int solve(int V, vector<vector<int>> adj[]) {
        int sum = 0;
        vector<int>vis(V, false);
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> q;
        //weight, node
        q.push({0, 0});
        
        while(!q.empty()) {
            int frontNode = q.top().second;
            int weight = q.top().first;
            q.pop();
            
            if(vis[frontNode])
                continue;
            
            vis[frontNode] = true;
            sum += weight;
            
            for(auto neighbour : adj[frontNode]) {
                if(!vis[neighbour[0]]) {
                    q.push({neighbour[1], neighbour[0]});
                }
            }
        }
        
        return sum;
    }
	public:
    int spanningTree(int V, vector<vector<int>> adj[]) {
        return solve(V, adj);
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
