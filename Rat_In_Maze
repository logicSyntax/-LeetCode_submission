//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  private:
    bool isValid(int row, int col,  vector<vector<int>> &mat, vector<vector<bool>> &vis) {
        int n = mat.size();
        int m = mat[0].size();
        
        return row>=0 && row<n && col>=0 && col<m && mat[row][col] == 1 && !vis[row][col];
    }
    void solve(int row, int col, string &str, vector<string> &result, vector<vector<int>> &mat, vector<vector<bool>> &vis) {
        if(row == mat.size()-1 && col == mat[0].size()-1) {
            result.push_back(str);
            return;
        }
        
        vis[row][col] = true;
        
        vector<int> dr = {-1, 0, 1, 0};
        vector<int> dc = {0, 1, 0, -1};
        string dir = "URDL";
        
        for(int i=0; i<4; i++) {
            int nrow = row + dr[i];
            int ncol = col + dc[i];
            
            if(isValid(nrow, ncol, mat, vis)) {
                str.push_back(dir[i]);
                solve(nrow, ncol, str, result, mat, vis);
                str.pop_back();
            }
        }
        
        vis[row][col] = false;
    }
  public:
    vector<string> findPath(vector<vector<int>> &mat) {
        int n = mat.size();
        int m = mat[0].size();
        
        vector<string> result;
        string ans = "";
        
        if(mat[0][0] != 1 || mat[n-1][m-1] != 1)
            return result;
            
        
        vector<vector<bool>> vis(n, vector<bool>(m, false));
        
        solve(0, 0, ans, result, mat, vis);
        
        return result;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
